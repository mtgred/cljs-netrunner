(ns game-test.cards.assets.the-board
  (:require [game.core :as core]
            [game-test.core :refer :all]
            [game-test.utils :refer :all]
            [game-test.macros :refer :all]
            [clojure.test :refer :all]))

(deftest the-board
  ;; The Board
  (testing "Modify everything in the score area (regression test for #1938)"
    (do-game
      (new-game {:corp {:deck ["The Board" "News Team" (qty "Firmware Updates" 2)]}
                 :runner {:deck [(qty "Artist Colony" 3) (qty "Fan Site" 3)]}})
      (starting-hand state :runner ["Artist Colony" "Fan Site"])
      (play-from-hand state :corp "The Board" "New remote")
      (play-from-hand state :corp "News Team" "New remote")
      (play-from-hand state :corp "Firmware Updates" "New remote")
      (take-credits state :corp)
      (play-from-hand state :runner "Artist Colony")
      (play-from-hand state :runner "Fan Site")
      (take-credits state :runner)
      (play-from-hand state :corp "Firmware Updates" "New remote")
      (score-agenda state :corp (get-content state :remote4 0))
      (is (= 1 (count (:scored (get-runner)))) "Fan Site added to Runner score area")
      (is (zero? (:agenda-point (get-runner))) "Runner has 0 agenda points")
      (take-credits state :corp)
      (run-empty-server state :remote3)
      (click-prompt state :runner "Steal")
      (is (= 2 (count (:scored (get-runner)))) "Firmware Updates stolen")
      (is (= 1 (:agenda-point (get-runner))) "Runner has 1 agenda point")
      (core/rez state :corp (get-content state :remote1 0))
      (is (= -1 (:agenda-point (get-runner))) "Runner has -1 agenda points")
      (run-empty-server state :remote2)
      (click-prompt state :runner "Add News Team to score area")
      (is (= 3 (count (:scored (get-runner)))) "News Team added to Runner score area")
      (is (= -3 (:agenda-point (get-runner))) "Runner has -3 agenda points")
      (card-ability state :runner (get-resource state 0) 0)
      (click-prompt state :runner (find-card "Fan Site" (:deck (get-runner))))
      (click-card state :runner (first (:scored (get-runner))))
      (is (= 2 (count (:scored (get-runner)))) "Fan Site removed from Runner score area")
      (is (= -2 (:agenda-point (get-runner))) "Runner has -2 agenda points")
      (run-empty-server state :remote1)
      (click-prompt state :runner "Pay 7 [Credits] to trash")
      (is (= 3 (count (:scored (get-runner)))) "The Board added to Runner score area")
      (is (= 2 (:agenda-point (get-runner))) "Runner has 2 agenda points")))
  (testing "handle Fifteen Minutes clicked out of Runner's score area"
    (do-game
      (new-game {:corp {:deck ["The Board" "15 Minutes"]}})
      (play-from-hand state :corp "The Board" "New remote")
      (play-from-hand state :corp "15 Minutes" "New remote")
      (core/rez state :corp (get-content state :remote1 0))
      (take-credits state :corp)
      (is (zero? (:agenda-point (get-runner))) "Runner has 0 agenda points")
      (run-empty-server state :remote2)
      (click-prompt state :runner "Steal")
      (is (zero? (:agenda-point (get-runner))) "Runner stays at 1 agenda point")
      (is (= 1 (count (:scored (get-runner)))) "Runner has 1 agenda in scored area")
      (take-credits state :runner)
      (let [fifm (first (:scored (get-runner)))]
        (card-ability state :corp (refresh fifm) 0)
        (is (zero? (:agenda-point (get-runner))) "Runner drops to 0 agenda points")
        (is (empty? (:scored (get-runner))) "Runner has no agendas in scored area"))))
  (testing "Corp scoring agenda shouldn't trigger The Board to lower Runner points"
    (do-game
      (new-game {:corp {:deck ["The Board" (qty "Hostile Takeover" 2)]}})
      (core/gain state :corp :credit 6)
      (play-from-hand state :corp "The Board" "New remote")
      (play-from-hand state :corp "Hostile Takeover" "New remote")
      (play-from-hand state :corp "Hostile Takeover" "New remote")
      (take-credits state :corp)
      (is (zero? (:agenda-point (get-runner))) "Runner has 0 agenda points")
      (run-empty-server state :remote3)
      (click-prompt state :runner "Steal")
      (is (= 1 (:agenda-point (get-runner))) "Runner has 1 agenda point")
      (is (= 1 (count (:scored (get-runner)))) "Runner has 1 agenda in scored area")
      (take-credits state :runner)
      (core/rez state :corp (get-content state :remote1 0))
      (is (zero? (:agenda-point (get-runner))) "Runner loses 1 agenda point")
      (is (= 1 (count (:scored (get-runner)))) "Runner still has 1 agenda in scored area")
      (score-agenda state :corp (get-content state :remote2 0))
      (is (zero? (:agenda-point (get-runner))) "Runner still has 0 agenda points")
      (is (= 1 (count (:scored (get-runner)))) "Runner still has 1 agenda in scored area")))
  (testing "Scoring two copies should be 4 agenda points"
    (do-game
      (new-game {:corp {:deck [(qty "The Board" 2)]}})
      (core/gain state :corp :credit 6)
      (play-from-hand state :corp "The Board" "New remote")
      (play-from-hand state :corp "The Board" "New remote")
      (core/rez state :corp (get-content state :remote1 0))
      (core/rez state :corp (get-content state :remote2 0))
      (take-credits state :corp)
      (core/gain state :runner :credit 14)
      (is (zero? (:agenda-point (get-runner))) "Runner has 0 agenda points")
      (is (empty? (:scored (get-runner))) "Runner has no agendas")
      (run-empty-server state :remote2)
      (click-prompt state :runner "Pay 7 [Credits] to trash")
      (is (= 1 (:agenda-point (get-runner))) "Runner has 1 agenda point")
      (is (= 1 (count (:scored (get-runner)))) "Runner has 1 agenda in scored area")
      (run-empty-server state :remote1)
      (click-prompt state :runner "Pay 7 [Credits] to trash")
      (is (= 4 (:agenda-point (get-runner))) "Runner has 4 agenda points")
      (is (= 2 (count (:scored (get-runner)))) "Runner has 2 agendas in scored area"))))
