(ns game-test.cards.agendas.ssl-endorsement
  (:require [game.core :as core]
            [game-test.core :refer :all]
            [game-test.utils :refer :all]
            [game-test.macros :refer :all]
            [clojure.test :refer :all]))

(deftest ssl-endorsement
  ;; SSL Endorsement
  (testing "gain credits when in corp score area before turn begins"
    (do-game
      (new-game {:corp {:deck ["SSL Endorsement"]}})
      (play-and-score state "SSL Endorsement")
      (take-credits state :runner)
      (is (not-empty (:prompt (get-corp))) "Corp prompted to take credits")
      (is (= 5 (:credit (get-corp))) "Corp starts with 5 credits")
      (click-prompt state :corp "Yes")
      (is (= 8 (:credit (get-corp))) "Corp gains 3 credits")
      (take-credits state :runner)
      (is (= 8 (:credit (get-corp))) "Corp starts with 8 credits")
      (click-prompt state :corp "No")
      (is (= 8 (:credit (get-corp))) "Corp doesn't gain 3 credits")
      (take-credits state :runner)
      (is (= 8 (:credit (get-corp))) "Corp starts with 8 credits")
      (click-prompt state :corp "Yes")
      (is (= 11 (:credit (get-corp))) "Corp gains 3 credits")
      (take-credits state :runner)
      (is (= 11 (:credit (get-corp))) "Corp starts with 11 credits")
      (click-prompt state :corp "Yes")
      (is (= 14 (:credit (get-corp))) "Corp gains 3 credits")
      (take-credits state :runner)
      (is (empty? (:prompt (get-corp))) "Not prompted when out of money")))
  (testing "gain credits when in runner score area before turn begins"
    (do-game
      (new-game {:corp {:deck ["SSL Endorsement"]}})
      (play-from-hand state :corp "SSL Endorsement" "New remote")
      (take-credits state :corp)
      (run-on state "Server 1")
      (run-successful state)
      (click-prompt state :runner "Steal")
      (take-credits state :runner)
      (is (not-empty (:prompt (get-corp))) "Corp prompted to take credits")
      (is (= 7 (:credit (get-corp))) "Corp starts with 7 credits")
      (click-prompt state :corp "Yes")
      (is (= 10 (:credit (get-corp))) "Corp gains 3 credits")
      (take-credits state :runner)
      (is (= 10 (:credit (get-corp))) "Corp starts with 10 credits")
      (click-prompt state :corp "No")
      (is (= 10 (:credit (get-corp))) "Corp doesn't gain 3 credits")
      (take-credits state :runner)
      (is (= 10 (:credit (get-corp))) "Corp starts with 10 credits")
      (click-prompt state :corp "Yes")
      (is (= 13 (:credit (get-corp))) "Corp gains 3 credits")
      (take-credits state :runner)
      (is (= 13 (:credit (get-corp))) "Corp starts with 13 credits")
      (click-prompt state :corp "Yes")
      (is (= 16 (:credit (get-corp))) "Corp gains 3 credits")
      (take-credits state :runner)
      (is (empty? (:prompt (get-corp))) "Not prompted when out of money")))
  (testing "register event when agenda swapped with Turntable"
    ;; Regression test for #3114
    (do-game
      (new-game {:corp {:deck ["SSL Endorsement" "Breaking News"]}
                 :runner {:deck ["Turntable"]}})
      (play-from-hand state :corp "Breaking News" "New remote")
      (play-and-score state "SSL Endorsement")
      (take-credits state :corp)
      (play-from-hand state :runner "Turntable")
      (run-on state "Server 1")
      (run-successful state)
      (click-prompt state :runner "Steal")
      (click-prompt state :runner "Yes")
      (click-card state :runner (find-card "SSL Endorsement" (:scored (get-corp))))  ;; Swap BN with SSL
      (take-credits state :runner)
      (is (not-empty (:prompt (get-corp))) "Corp prompted to take credits")
      (is (= 6 (:credit (get-corp))) "Corp starts with 7 credits")
      (click-prompt state :corp "Yes")
      (is (= 9 (:credit (get-corp))) "Corp gains 3 credits from Turntable'd SSL Endorsement")))
  (testing "don't double register event when agenda is swapped"
    (do-game
      (new-game {:corp {:deck ["SSL Endorsement" "Breaking News"
                               "Exchange of Information"]}})
      (play-from-hand state :corp "SSL Endorsement" "New remote")
      (play-and-score state "Breaking News")
      (take-credits state :corp)
      (run-on state "Server 1")
      (run-successful state)
      (click-prompt state :runner "Steal")
      (take-credits state :runner)
      (is (not-empty (:prompt (get-corp))) "Corp prompted to take credits")
      (is (= 6 (:credit (get-corp))) "Corp starts with 6 credits")
      (click-prompt state :corp "Yes")
      (is (= 9 (:credit (get-corp))) "Corp gains 3 credits")
      (core/gain state :runner :tag 1)
      (play-from-hand state :corp "Exchange of Information")
      (click-card state :corp (find-card "SSL Endorsement" (:scored (get-runner))))
      (click-card state :corp (find-card "Breaking News" (:scored (get-corp))))
      (take-credits state :runner)
      (is (= 9 (:credit (get-corp))) "Corp starts with 9 credits")
      (click-prompt state :corp "No")
      (is (empty? (:prompt (get-corp))) "Not double prompted for credits")
      (is (= 9 (:credit (get-corp))) "Corp doesn't gain 3 credits")
      (take-credits state :runner)
      (is (= 9 (:credit (get-corp))) "Corp starts with 9 credits")
      (click-prompt state :corp "Yes")
      (is (= 12 (:credit (get-corp))) "Corp gains 3 credits")
      (take-credits state :runner)
      (is (= 12 (:credit (get-corp))) "Corp starts with 12 credits")
      (click-prompt state :corp "Yes")
      (is (= 15 (:credit (get-corp))) "Corp gains 3 credits")
      (take-credits state :runner)
      (is (empty? (:prompt (get-corp))) "Not prompted when out of money"))))
